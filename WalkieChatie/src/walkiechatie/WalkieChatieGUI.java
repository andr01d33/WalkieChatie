/*
 * GUI client for WalkieChatie chat messaging system.
 */
package walkiechatie;

import DataContract.Config;
import DataContract.DataTypes;
import WalkieChatieLibrary.Mailbox;
import DataContract.Contact;
import DataContract.Letter;
import WalkieChatieLibrary.MailboxClient;
import java.awt.event.KeyEvent;
import java.util.Map;
import javax.swing.text.*;
import javax.swing.text.html.*;
import javax.swing.*;


public class WalkieChatieGUI extends javax.swing.JFrame implements DataTypes.MessageListener, DataTypes.UserListListener {

  private MailboxClient mailbox = null;
  public static final String USER_NAME = "Fred";  
  
  public boolean connected;
  
  String lastUserSelected;
  
  /**
   * Creates new form WalkieChatieGUI
   */
  public WalkieChatieGUI() {
    initComponents();
    
    lastUserSelected = null;
    
    // put default config into textboxes:
    userTextField.setText(USER_NAME);
    serverTextField.setText(Config.SERVER_ADDRESS);
    portTextField.setText(new Integer(Config.SERVER_PORT_TCP).toString());
    
    // Initial help message:
    String html = new String(); 
    html  = "<p style=\"margin: 5px 0px\"><b>WalkieChatie 1.0</b></p>";
    html += "<p style=\"margin: 5px 0px\"><b>Enter your name into the top-left field and click Connect.</b></p>";
    html += "<p style=\"margin: 5px 0px\"><b>Select a user's name in the list to send them a private messge.</b></p>";
    html += "<p style=\"margin: 0px\">&nbsp;</p>";
    chatTextPane.setText(html);    

    // initial control states    
    connected = false;
    updateControlStates();
   
  } // WalkieChatieGUI

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    userTextField = new javax.swing.JTextField();
    jLabel1 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    serverTextField = new javax.swing.JTextField();
    jLabel3 = new javax.swing.JLabel();
    portTextField = new javax.swing.JFormattedTextField();
    connectButton = new javax.swing.JButton();
    jSplitPane1 = new javax.swing.JSplitPane();
    jScrollPane4 = new javax.swing.JScrollPane();
    chatTextPane = new javax.swing.JTextPane();
    jScrollPane2 = new javax.swing.JScrollPane();
    userList = new javax.swing.JList<>();
    messageTextField = new javax.swing.JTextField();
    sendButton = new javax.swing.JButton();
    disconnectButton = new javax.swing.JButton();
    messageLabel = new javax.swing.JLabel();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("WalkieChatie");
    addWindowListener(new java.awt.event.WindowAdapter() {
      public void windowClosing(java.awt.event.WindowEvent evt) {
        formWindowClosing(evt);
      }
    });

    userTextField.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyPressed(java.awt.event.KeyEvent evt) {
        userTextFieldKeyPressed(evt);
      }
    });

    jLabel1.setText("Name:");

    jLabel2.setText("Server:");

    jLabel3.setText("Port:");

    portTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("####"))));
    portTextField.setText("9999");

    connectButton.setText("Connect");
    connectButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        connectButtonActionPerformed(evt);
      }
    });

    jSplitPane1.setDividerLocation(600);
    jSplitPane1.setResizeWeight(1.0);

    jScrollPane4.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

    chatTextPane.setEditable(false);
    chatTextPane.setContentType("text/html"); // NOI18N
    chatTextPane.setText("<html><body></body></html>");
    jScrollPane4.setViewportView(chatTextPane);

    jSplitPane1.setLeftComponent(jScrollPane4);

    jScrollPane2.setToolTipText("");

    userList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
    userList.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mousePressed(java.awt.event.MouseEvent evt) {
        userListMousePressed(evt);
      }
    });
    jScrollPane2.setViewportView(userList);

    jSplitPane1.setRightComponent(jScrollPane2);

    messageTextField.setName("MessageTextField"); // NOI18N
    messageTextField.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyPressed(java.awt.event.KeyEvent evt) {
        messageTextFieldKeyPressed(evt);
      }
    });

    sendButton.setText("Send");
    sendButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        sendButtonActionPerformed(evt);
      }
    });

    disconnectButton.setText("Disconnect");
    disconnectButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        disconnectButtonActionPerformed(evt);
      }
    });

    messageLabel.setText("Broadcast message to all users:");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addGap(12, 12, 12)
            .addComponent(messageTextField))
          .addGroup(layout.createSequentialGroup()
            .addGap(16, 16, 16)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(layout.createSequentialGroup()
                .addComponent(messageLabel)
                .addGap(0, 0, Short.MAX_VALUE))
              .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(serverTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(connectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))))
        .addGap(2, 2, 2)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(sendButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(disconnectButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(19, 19, 19))
      .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
          .addGap(16, 16, 16)
          .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE)
          .addGap(19, 19, 19)))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGap(16, 16, 16)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(userTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel1)
          .addComponent(jLabel2)
          .addComponent(serverTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel3)
          .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(connectButton)
          .addComponent(disconnectButton))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 392, Short.MAX_VALUE)
        .addComponent(messageLabel)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(messageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(sendButton))
        .addGap(14, 14, 14))
      .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
          .addGap(60, 60, 60)
          .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addContainerGap(79, Short.MAX_VALUE)))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
    connect();
  }//GEN-LAST:event_connectButtonActionPerformed

  private void disconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectButtonActionPerformed
    disconnect();
  }//GEN-LAST:event_disconnectButtonActionPerformed

  private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
    send();
  }//GEN-LAST:event_sendButtonActionPerformed

  private void messageTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_messageTextFieldKeyPressed
    if (evt.getKeyCode() == KeyEvent.VK_ENTER) 
      send();
  }//GEN-LAST:event_messageTextFieldKeyPressed

  private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
    if (connected)
      disconnect();
  }//GEN-LAST:event_formWindowClosing

  private void userTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_userTextFieldKeyPressed
    if (evt.getKeyCode() == KeyEvent.VK_ENTER) 
      connect();
  }//GEN-LAST:event_userTextFieldKeyPressed

  private void userListMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userListMousePressed
    String userSelected = userList.getSelectedValue();
    if ((lastUserSelected != null && userSelected != null && lastUserSelected.equals(userSelected))
      || (userSelected != null && userSelected.equals(mailbox.owner.getName()))) {
      userList.clearSelection();
      userSelected = null;
      messageLabel.setText("Broadcast message to all users:");
    }
    else if (userSelected != null) {
      messageLabel.setText("Private message to " + userSelected + ":");      
    }
    lastUserSelected = userSelected;
  }//GEN-LAST:event_userListMousePressed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(WalkieChatieGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(WalkieChatieGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(WalkieChatieGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(WalkieChatieGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        new WalkieChatieGUI().setVisible(true);
      }
    });
  }
  
  
  public void updateControlStates() {
    userTextField.setEnabled(!connected);
    serverTextField.setEnabled(!connected);
    portTextField.setEnabled(!connected);
    connectButton.setEnabled(!connected);
    disconnectButton.setEnabled(connected);
    sendButton.setEnabled(connected);
    messageTextField.setEnabled(connected);
    messageLabel.setText(connected ? "Broadcast message to all users:" : "Not connected");
  } // updateControlStates
  
  
  public void connect() {
    // connect user to the chat server using name,server,port values from textfields ...
    // NOTE: not complete, MailboxClient should take server (and port?) values for Contact class...
    
    String user = userTextField.getText();
    String serverAddr = serverTextField.getText();
    int serverPort = Integer.parseInt(portTextField.getText());
    
    mailbox = new MailboxClient(user, serverAddr, serverPort); 
    mailbox.addNewMessageListener(this);
    mailbox.addressBook.addUserListListener(this);
    
    
    
    Letter returnLetter = mailbox.login();
    if (returnLetter == null)
    {
        connected = false;
        Letter infoLetter = new Letter(
                DataTypes.MessageType.Message_Delivery_Failed,
                user, Config.SERVER_NAME,
                "Connection failed, please check your server address settings.");
        showMessage(infoLetter);
    }
    else if (returnLetter.getMessageType() != DataTypes.MessageType.Message_Delivery_Successful) {
        //login failed
        returnLetter.setMessageType(DataTypes.MessageType.Message_Delivery_Failed);
        showMessage(returnLetter);
    }
    else
    {
      // successful login
      connected = true;
      updateControlStates();
      updateUserList();
      messageTextField.requestFocusInWindow();
    }
  } // connect
  
  public void disconnect() {
    // logout mailbox and return GUI controls to disconnected state:
    mailbox.logout();
    connected = false;    
    updateControlStates();
    updateUserList();
  } // disconnect
  
  public void send() {
    String msg = messageTextField.getText();
    
    if (lastUserSelected != null)
      mailbox.send(lastUserSelected, msg);
    else
      mailbox.sendAll(msg);

    messageTextField.setText("");
  } // send
  
  
  public void showMessage(Letter letter) {
    // add message to the chat window, with custom colour and formatting 
    // depending on which type it is:
    
    // delete < & > characters in case of HTML injection from someone
    String msg = letter.getMessage();
    msg = msg.replace("<", "");
    msg = msg.replace(">", "");

    DataTypes.MessageType msgType = letter.getMessageType();
    String type = " ";
    switch (msgType) {
      case Message_Individual:
        // private message
        if (letter.getSender().equals(mailbox.owner.getName())) 
          appendLine("<b>Private message to " + letter.getRecipient() + ":</b> " + msg);
        else
          appendLine("<b>Private message from " + letter.getSender() + ":</b> " + msg);
        break;
      case Message_Broadcast:
        // message to the public room
        appendLine(letter.getSender() + " says: " + msg);
        break;
      case Message_Delivery_Failed:
        // error message from the server
        appendLine("<span style=\"text-color:red\">Server: " + msg + "</span>");
    }

  } // showMessage


  public void appendLine(String html) {
    
    // Appends a line of HTML marked-up text to the chatTextPane.
    // The text is enclosed inside a paragraph with a 0 top margin so that lines
    // appear with no space between.
    
    HTMLDocument htmlDocument = (HTMLDocument)(chatTextPane.getStyledDocument());
    Element bodyElement = null;
    Element htmlElement = htmlDocument.getDefaultRootElement();
    for (int i = 0; i < htmlElement.getElementCount(); i++) {
      Element e = htmlElement.getElement(i);
      if (e.getName().equalsIgnoreCase("body")) {
        bodyElement = e;
        break;
      }
    }
   
    if (bodyElement != null) {
      try { 
        html = "<p style=\"margin-top:0px\">" + html + "</p>";
        htmlDocument.insertBeforeEnd(bodyElement, html);
//        System.out.println(chatTextPane.getText());        
      }
      catch (Exception e) {
        System.err.println(e.getClass().toString() + ": " + e.getMessage());
      }
    }
    else
      System.err.println("Couldn't find body element.");      

  } // appendLine
  
  
  public void updateUserList() {
    // refresh the user list from the mailbox's AddressBook object
    DefaultListModel<String> listModel = new DefaultListModel(); //<String>;
    for (Map.Entry<String, Contact> entry : mailbox.addressBook.map.entrySet()) {
      Contact contact = entry.getValue();
      if (contact.getIsOnline()) 
        listModel.addElement(contact.getName());
    }
    userList.setModel(listModel);
  } // updateUserList
  
  
  @Override
  public void newMessageArrived() {
    Letter letter;
    while ((letter = mailbox.LetterQueue.poll()) != null) 
      showMessage(letter);
  } // newMessageArrived
  
  @Override
  public void userStatusChanged(String userName, boolean isOnline) {
//    System.out.println("User: " + userName + " is now " + (isOnline ? "online." : "offline."));
    updateUserList();
  } // userStatusChanged
  

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JTextPane chatTextPane;
  private javax.swing.JButton connectButton;
  private javax.swing.JButton disconnectButton;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JScrollPane jScrollPane4;
  private javax.swing.JSplitPane jSplitPane1;
  private javax.swing.JLabel messageLabel;
  private javax.swing.JTextField messageTextField;
  private javax.swing.JFormattedTextField portTextField;
  private javax.swing.JButton sendButton;
  private javax.swing.JTextField serverTextField;
  private javax.swing.JList<String> userList;
  private javax.swing.JTextField userTextField;
  // End of variables declaration//GEN-END:variables
}
